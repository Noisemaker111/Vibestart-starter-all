"use client"

import React, { useState } from "react";

export default function CursorProjectRule() {
  // ────────────────────────────────────────────────────────────────────────────
  // Local component state
  // ────────────────────────────────────────────────────────────────────────────
  const RULE_CONFIG = {
    Always: {
      defaultDesc: "This rule is attached to every chat and command+k request",
      editable: false,
      label: "Description",
      placeholder: "",
    },
    AutoAttached: {
      defaultDesc: "",
      editable: true,
      label: "File Pattern Matches",
      placeholder: ".tsx, src/config/**/*.json, *Test.cpp, …",
    },
    AgentRequested: {
      defaultDesc: "",
      editable: true,
      label: "Description",
      placeholder: "Description for the task this rule is helpful for",
    },
    Manual: {
      defaultDesc: "This rule needs to be mentioned to be included",
      editable: false,
      label: "Description",
      placeholder: "",
    },
  } as const;

  type RuleType = keyof typeof RULE_CONFIG;

  // Two files to edit (mirror .cursor rules)
  const FILES = [
    {
      name: "project-structure.mdc",
      defaultBody: `---
description: 
globs: 
alwaysApply: true
---
<project-structure>
src/ — all source code
src/client/ — React 19 browser app (SSR)
src/client/components/ — reusable UI primitives & feature sections
  • Header.tsx — nav bar & theme toggle
  • IdeaCarousel.tsx — rotating suggestions
  • IntegrationChips.tsx — chips UI summarizing integrations
  • Badge.tsx — generic reusable badge component (replaces SoonBadge)
  • TechStack.tsx — production-ready stack overview (was ServicesProvided)
  ├─ auth/ — auth-related UI
  │   • CreateOrganizationButton.tsx — org modal (auth-gated)
  │   • LoginModal.tsx — modal wrapper for SignInForm
  │   • SignInButton.tsx — login / logout trigger
  │   • SignInForm.tsx — email+pwd & Google OAuth form
  ├─ uploads/
  │   • SquareUploadButton.tsx — UploadThing button
  ├─ home/ — landing-page focused components
  │   • MainInfo.tsx
  │   • IdeaCard.tsx
  │   • OtherCTA.tsx
  │   • OtherInfo.tsx (embeds TechStack)
  │   • VersionTag.tsx
  └─ docs/
      ├─ cursor/
      │   • CursorProjectRule.tsx — displays project rules
      ├─ command/ — blueprint components (TBD)
      └─ test/ — example usage of integrations
          • TestAuth.tsx, TestBilling.tsx, TestDatabase.tsx,
            TestLLM.tsx, TestMaps.tsx, TestOrganisations.tsx,
            TestRealtimeMessages.tsx, TestUploads.tsx
          • BuildIdeaTab.tsx — dynamic build guide customised per platform/integrations
src/client/context/ — React context providers
  • AuthContext.tsx — Supabase session provider
  • OsContext.tsx — OS detection helper
src/client/pages/ — router pages (React Router)
  • home.tsx — marketing landing page
  • docs.tsx — in-app docs hub
  • api.animals.tsx — edge bridge → server/animals
  • api.images.tsx — edge bridge → list uploads
  • api.uploadthing.tsx — edge bridge → uploadthing router
src/client/utils/ — browser helpers
  • integrationLLM.ts, platformIntegrationPrompt.ts — AI utilities
  • rateLimit.ts — syncs rate-limit headers to UI
  • uploadthing.ts — UploadThing React helpers
  • (plus generated types)
src/client/root.tsx — Remix-style root layout
src/client/routes.ts — static route map

src/server/ — edge runtime + API logic
  • animals.ts — REST-like handler for animals
  • uploadthing.ts — UploadThing upload router
  ├─ utils/
  │   • anonToken.ts — HMAC-signed anon cookies
  │   • rateLimit.ts — unified DB-backed rate limiter
  └─ db/
      • index.ts — Drizzle client init (.env loaded)
      • schema.ts — single source-of-truth tables
      ├─ migrations/ — SQL migration files generated by drizzle-kit
      └─ queries/ — typed Drizzle query builders

src/shared/ — isomorphic helpers (importable client & server)
  • appIdeas.ts — hundreds of placeholder ideas
  • availableIntegrations.ts — integration metadata
  • availablePlatforms.ts — platform metadata
  • memories.ts — memory persistence across sessions
  • project-rules.ts, user-rules.ts — runtime-loaded rule sets
  • supabase.ts — Supabase client factory
  • app.css — Tailwind entrypoint & utilities

public/ — static assets (favicon, images, etc.)

tailwind.config.js — Tailwind v4 config
react-router.config.ts — React Router build/dev config
vite.config.ts — Vite SSR config & aliases
tsconfig.json — TS paths & compiler options
drizzle.config.ts — Drizzle migration config
package.json — dependencies & npm scripts
README.md — project overview
start-coding.md — project quickstart guide
env.example — sample environment variables

src/types/ — global TypeScript type declarations
  • raw.d.ts — raw import module declarations

src/types/ — global TypeScript type declarations
  • app.css — Tailwind entrypoint & utilities
</project-structure>`
    },
    {
      name: "tech-stack.mdc",
      defaultBody: `---
description: 
globs: 
alwaysApply: true
---
- lang: TypeScript 5
- frontend: React 19 + ReactRouter 7 (SSR) via Vite 6 & vite-tsconfig-paths
- style: TailwindCSS 4 (@tailwindcss/vite)
- runtime: Node 18
- db: PostgreSQL (Supabase) · DrizzleORM 0.44 · schema [schema.ts](mdc:src/server/db/schema.ts)
- migrations: drizzle-kit CLI
- auth: SupabaseAuth (Google) · libs @supabase/auth-ui-react & @supabase/supabase-js
- files: UploadThing · client [uploadthing.ts](mdc:src/client/utils/uploadthing.ts) · server [uploadthing.ts](mdc:src/server/uploadthing.ts)
- validation: Zod · central [schema.ts](mdc:src/shared/schema.ts)
- rate-limit: [rateLimit.ts](mdc:src/server/utils/rateLimit.ts)
- analytics: PostHog JS
- date: Day.js
- icons: Lucide React
- deploy: Vercel primary`
    }
  ] as const;

  // Track state per file (using arrays indexed by FILES order)
  const [ruleTypes, setRuleTypes] = useState<string[]>(FILES.map(() => "Always"));
  const [descriptions, setDescriptions] = useState<string[]>(FILES.map(() => RULE_CONFIG.Always.defaultDesc));
  const [contents, setContents] = useState<string[]>(FILES.map(f => f.defaultBody));

  const updateRuleType = (idx: number, newType: keyof typeof RULE_CONFIG) => {
    setRuleTypes(prev => {
      const next = [...prev];
      next[idx] = newType;
      return next;
    });
    setDescriptions(prev => {
      const next = [...prev];
      next[idx] = RULE_CONFIG[newType].defaultDesc;
      return next;
    });
  };

  const copyToClipboard = async (idx: number) => {
    const ruleObject = {
      name: FILES[idx].name,
      rule_type: ruleTypes[idx],
      other: descriptions[idx],
      body: contents[idx]
    } as const;

    try {
      await navigator.clipboard.writeText(JSON.stringify(ruleObject, null, 2));
    } catch (err) {
      console.error("Failed to copy", err);
    }
  };

  // ────────────────────────────────────────────────────────────────────────────
  // Render
  // ────────────────────────────────────────────────────────────────────────────
  return (
    <div className="space-y-10">
      {FILES.map((file, idx) => {
        const ruleKey = ruleTypes[idx] as RuleType;
        const cfg = RULE_CONFIG[ruleKey];

        return (
          <div
            key={file.name}
            className="w-full max-w-4xl mx-auto bg-gray-900 text-white font-mono text-sm rounded-lg overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between bg-gray-800 px-4 py-2 border-b border-gray-700">
              <span className="text-gray-300">{file.name}</span>
              <button
                onClick={() => copyToClipboard(idx)}
                className="text-xs px-2 py-1 rounded border border-gray-600 hover:bg-gray-700"
              >
                Copy
              </button>
            </div>

            {/* Form Fields */}
            <div className="p-4 space-y-4">
              {/* Select & Description row */}
              <div className="flex flex-col sm:flex-row gap-4">
                {/* Rule Type */}
                <div className="flex-1 sm:max-w-[160px] space-y-1">
                  <label htmlFor={`rule-type-${idx}`} className="text-gray-400 text-xs">
                    Rule Type
                  </label>
                  <select
                    id={`rule-type-${idx}`}
                    value={ruleTypes[idx]}
                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>
                      updateRuleType(idx, e.target.value as RuleType)
                    }
                    className="w-full bg-gray-800 border border-gray-700 text-white text-xs px-2 py-1 rounded"
                  >
                    <option value="Always">Always</option>
                    <option value="AutoAttached">Auto-attached</option>
                    <option value="AgentRequested">Agent Requested</option>
                    <option value="Manual">Manual</option>
                  </select>
                </div>

                {/* Description / Pattern */}
                <div className="flex-1 space-y-1">
                  <label htmlFor={`description-${idx}`} className="text-gray-400 text-xs">
                    {cfg.label}
                  </label>
                  <input
                    id={`description-${idx}`}
                    type="text"
                    value={descriptions[idx]}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                      setDescriptions(prev => {
                        const next = [...prev];
                        next[idx] = e.target.value;
                        return next;
                      })
                    }
                    className={`w-full bg-gray-800 border border-gray-700 text-gray-200 text-xs px-2 py-1 rounded ${
                      !cfg.editable ? "opacity-60 cursor-not-allowed" : ""
                    }`}
                    placeholder={cfg.placeholder}
                    disabled={!cfg.editable}
                  />
                </div>
              </div>

              {/* Content */}
              <div className="space-y-1">
                <label htmlFor={`content-${idx}`} className="text-gray-400 text-xs">
                  Body
                </label>
                <textarea
                  id={`content-${idx}`}
                  value={contents[idx]}
                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                    setContents(prev => {
                      const next = [...prev];
                      next[idx] = e.target.value;
                      return next;
                    })
                  }
                  className="w-full min-h-[400px] bg-gray-800 border border-gray-700 text-gray-200 text-xs leading-relaxed p-2 rounded resize-y"
                />
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}
