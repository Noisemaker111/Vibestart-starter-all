export const DEFAULT_RULE_FILES = [
  {
    name: "project-structure.mdc",
    defaultBody: `---
description: 
globs: 
alwaysApply: true
---
<project-structure>
src/ — all source code
src/client/ — React 19 browser app (SSR)
src/client/components/ — reusable UI primitives & feature sections
  • Header.tsx — nav bar & theme toggle
  • IdeaCarousel.tsx — rotating suggestions
  • IntegrationChips.tsx — chips UI summarizing integrations
  • Badge.tsx — generic reusable badge component
  • TechStack.tsx — production-ready stack overview (was ServicesProvided)
  ├─ auth/ — auth-related UI
  │   • CreateOrganizationButton.tsx — org modal (auth-gated)
  │   • LoginModal.tsx — modal wrapper for SignInForm
  │   • SignInButton.tsx — login / logout trigger
  │   • SignInForm.tsx — email+pwd & Google OAuth form
  ├─ uploads/
  │   • SquareUploadButton.tsx — UploadThing button
  ├─ home/ — landing-page focused components
  │   • MainInfo.tsx
  │   • IdeaCard.tsx
  │   • OtherCTA.tsx
  │   • OtherInfo.tsx (embeds TechStack)
  │   • VersionTag.tsx
  └─ docs/
      ├─ cursor/
      │   • CursorProjectRule.tsx — displays project rules
      ├─ command/ — blueprint components (TBD)
      └─ test/ — example usage of integrations
          • TestAuth.tsx, TestBilling.tsx, TestDatabase.tsx,
            TestLLM.tsx, TestMaps.tsx, TestOrganisations.tsx,
            TestRealtimeMessages.tsx, TestUploads.tsx
          • BuildIdeaTab.tsx — dynamic build guide customised per platform/integrations
src/client/context/ — React context providers
  • AuthContext.tsx — Supabase session provider
  • OsContext.tsx — OS detection helper
src/client/pages/ — router pages (React Router)
  • home.tsx — marketing landing page
  • docs.tsx — in-app docs hub
  • api.animals.tsx — edge bridge → server/animals
  • api.images.tsx — edge bridge → list uploads
  • api.uploadthing.tsx — edge bridge → uploadthing router
src/client/utils/ — browser helpers
  • integrationLLM.ts, platformIntegrationPrompt.ts — AI utilities
  • rateLimit.ts — syncs rate-limit headers to UI
  • uploadthing.ts — UploadThing React helpers
  • (plus generated types)
src/client/root.tsx — Remix-style root layout
src/client/routes.ts — static route map

src/server/ — edge runtime + API logic
  • animals.ts — REST-like handler for animals
  • uploadthing.ts — UploadThing upload router
  ├─ utils/
  │   • anonToken.ts — HMAC-signed anon cookies
  │   • rateLimit.ts — unified DB-backed rate limiter
  └─ db/
      • index.ts — Drizzle client init (.env loaded)
      • schema.ts — single source-of-truth tables
      ├─ migrations/ — SQL migration files generated by drizzle-kit
      └─ queries/ — typed Drizzle query builders

src/shared/ — isomorphic helpers (importable client & server)
  • appIdeas.ts — hundreds of placeholder ideas
  • availableIntegrations.ts — integration metadata
  • availablePlatforms.ts — platform metadata
  • project-rules.ts, user-rules.ts — runtime-loaded rule sets
  • supabase.ts — Supabase client factory
  • app.css — Tailwind entrypoint & utilities

public/ — static assets (favicon, images, etc.)

tailwind.config.js — Tailwind v4 config
react-router.config.ts — React Router build/dev config
vite.config.ts — Vite SSR config & aliases
tsconfig.json — TS paths & compiler options
drizzle.config.ts — Drizzle migration config
package.json — dependencies & npm scripts
README.md — project overview
start-coding.md — project quickstart guide
env.example — sample environment variables

src/types/ — global TypeScript type declarations
  • raw.d.ts — raw import module declarations

src/types/ — global TypeScript type declarations
  • app.css — Tailwind entrypoint & utilities
</project-structure>`
  },
  {
    name: "tech-stack.mdc",
    defaultBody: `---
description: 
globs: 
alwaysApply: true
---
- lang: TypeScript 5
- frontend: React 19 + ReactRouter 7 (SSR) via Vite 6 & vite-tsconfig-paths
- style: TailwindCSS 4 (@tailwindcss/vite)
- runtime: Node 18
- db: PostgreSQL (Supabase) · DrizzleORM 0.44 · schema [schema.ts](mdc:src/server/db/schema.ts)
- migrations: drizzle-kit CLI
- auth: SupabaseAuth (Google) · libs @supabase/auth-ui-react & @supabase/supabase-js
- files: UploadThing · client [uploadthing.ts](mdc:src/client/utils/uploadthing.ts) · server [uploadthing.ts](mdc:src/server/uploadthing.ts)
- validation: Zod · central [schema.ts](mdc:src/shared/schema.ts)
- rate-limit: [rateLimit.ts](mdc:src/server/utils/rateLimit.ts)
- analytics: PostHog JS
- date: Day.js
- icons: Lucide React
- deploy: Vercel primary`
  },
] as const; 